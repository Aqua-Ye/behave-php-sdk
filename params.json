{"name":"Behave-php-sdk","tagline":"Behave.io PHP SDK","body":"### Behave PHP SDK\r\n\r\n## Introduction\r\n\r\nOur PHP library lets you easily identify your users, track their behaviours and make full use of the API.\r\nThe SDK also allows you to dynamically create and remove leaderboards, contests, badges, retrieve leaderboard results etc...\r\n\r\n## Getting started\r\n\r\n```php\r\nrequire_once(\"behave.php\");\r\n\r\nBehave::init(\"YOUR_API_SECRET);\r\n```\r\n\r\n## Players\r\n\r\n### Identify\r\n\r\nYou need to identify your users at least once so their player profiles can be created.\r\nIf you call ``identify()`` multiple times with the same user id, the existing player is updated and returned instead. You can optionally attribute some traits to the player.\r\n\r\n```php\r\n$player = Behave::identify(\"42\", array(\r\n  // traits\r\n  'email'   => 'olivier@behave.io',\r\n  'name'    => 'Olivier Thierry',\r\n  'picture' => 'http://url_to_picture',\r\n  'foo'     => 'bar'\r\n));\r\n```\r\n\r\nthe returned Player has the following attributes\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| _id           | String | The id of the Player |\r\n| reference_id  | String | The custom id use have use in ``identify()`` |\r\n| points        | Number | The number of points of the player (if any, 0 otherwise) |\r\n| traits        | Object | The custom traits you have given too the player |\r\n\r\n### Other Identities (Social)\r\n\r\nYou can add and remove identities from different providers (facebook, twitter, yammer) to your players.\r\nAdding identities from providers allow us to fetch default data (name, picture) ONLY if authorised (we do not ask for additional permissions).\r\n\r\nIn order to use social features, you need to add provider credentials [to your app settings](http://dashboard.behave.io/settings) (e.g: Facebook App Id, etc...)\r\n\r\nFor example, if you want to add facebook identity to the player 42\r\n\r\n```php\r\nBehave::addIdentity('42', '414214', 'facebook');\r\n```\r\n\r\nTo remove an identity:\r\n\r\n```php\r\nBehave::removeIdentity('42', 'facebook');\r\n```\r\n\r\n## Behaviours\r\n\r\nYou need to track your players behaviours if you want to reward them for doing so. Tracking can be either simple or contextual. You can specify ANY key value pairs to describe the context the behaviour was taken. \r\n\r\n### Simple tracking\r\n\r\n```php\r\nBehave::track(\"42\", \"login\");\r\n```\r\n\r\n### Contextual tracking\r\n\r\n```php\r\nBehave::track(\"42\", \"coment-tvshow\", array(\r\n  'tvShow'  => 24,\r\n  'episode' => 11\r\n));\r\n```\r\n\r\n### Tracking results\r\n\r\nWhen you track a user behaviours using ``track()`` you get back a result object you can use. The result contains the actions that the tracking has trigger (from your [recipes](http://dashboard.behave.io/recipes)).\r\n\r\n```php\r\n$bhResults = Behave::track(\"42\", \"check-in\");\r\n```\r\n\r\nThe results contains 3 attributes.\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| badge         | Badge | The unlocked badge (if any, null otherwise) |\r\n| points        | Object | With 2 attributes: ``earned`` and ``balance``. ``earned`` is the number of points the user earned by taking the action or 0 if no points earned, ``balance`` is the updated balance of the player points |\r\n| leaderboards  | Array[Object] |  Leaderboard updates (if any,  empty otherwise). See bellow for detailed structure |\r\n\r\nExample accessing ``$bhResults->points`` attribute.\r\n\r\n```php\r\necho $bhResults->points\r\n{ \r\n  // The number of points the user earned by taking the action\r\n  'earned'  => 0, \r\n\r\n  // The player's updated balance including the points he just earned\r\n  'balance' => 840\r\n}\r\n```\r\n\r\nIf not null ``$bhResults->badge`` contains the Badge that the user has just unlocked. The structure looks like this:\r\n\r\n```php\r\necho $bhResults->badge \r\n// Example output\r\n{\r\n    // Reward id\r\n    \"_id\"    => \"52a01b67cc7df72c79000003\"\r\n    // Number of times this reward was earned by this player\r\n    \"count\"  => 1\r\n    // Badge definition\r\n    \"badge\" => {\r\n      // Badge id\r\n      \"_id\"          => \"529fff2356ce248366000006\"\r\n      // badge name\r\n      \"name\"         => \"Deloitte Newbie\"\r\n      // Badge custom id you have defnied\r\n      \"reference_id\" => \"42-newbie\"\r\n      // If badge not active, it cannot be unlocked\r\n      \"active\"       => true\r\n      // If unique, a player can unlock this badge ONLY ONCE\r\n      \"unique\"       => false\r\n      // the badge can be unlocked in total, 0 means unlimited.\r\n      \"limit\"        => 0\r\n    }\r\n  }\r\n```\r\n\r\nIf not empty, ``$bhResults->leaderboards`` will contain something like this\r\n\r\n```php\r\necho $bhResults->leaderboards\r\n[\r\n  {\r\n     // The updated leaderboard\r\n     'leaderboard'      => {\r\n        'id'=> '529fff1156ce248366000006',\r\n        'reference_id' => 'custom-id-you-have-defined'\r\n     },\r\n     // Player's position before the update\r\n     'prev_position'    => 5,\r\n     // Player's position after the update\r\n     'post_position     => 2,\r\n     // Player's updated score\r\n     'score'            => 435,\r\n     // The players that have been defeated (3->5)\r\n     'defeated_players' => ['player-custom-id1', 'player-custom-id2', 'player-custom-id3']\r\n   }\r\n]\r\n```\r\n## Leaderboards\r\n\r\n### Getting leaderboard current results\r\n\r\nYou can fetch the actual results of any leaderboard at anytime. **The result is an array sorted by score ascending**\r\n\r\n```php\r\n$leaderboardResults = Behave::fetchLeaderboardResults('sample-leaderboard');\r\n```\r\n\r\nResults structure will look like this\r\n\r\n```php\r\n[\r\n  {\r\n    // Player score\r\n    'score'  => 129,\r\n    'player' => {\r\n      '_id' => \"529fe03ecbd86b9d6c000002\",\r\n      'traits' => {\r\n        'name'  => 'Olivier Thierry'\r\n        'email' => 'olivier@behave.io'\r\n      },\r\n      'identities' => {\r\n         'facebook' => 12323\r\n      }\r\n    }\r\n  },\r\n  {\r\n    // Player score\r\n    'score'  => 102,\r\n    'player' => {\r\n      '_id' => \"947pg03ecbd86b9d6c05520\",\r\n      'traits' => {\r\n        'name'  => 'Olivier Jeandel'\r\n        'email' => 'jide@behave.io'\r\n      },\r\n      'identities' => {\r\n         'facebook' => 5435\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n\r\n### Getting leaderboard previous results\r\n\r\nFor leaderboard with a timeframe other than \"alltime\" keep a copy of the previous leaderboard results, before it was reset to 0. (e.g A daily leaderboard will keep the results of the previous day).\r\n\r\n```php\r\n$leaderboardResults = Behave::fetchLeaderboardPreviousResults('sample-leaderboard');\r\n```\r\n\r\n### Creating a leaderboard\r\n\r\n\r\n```php\r\nBehave::createLeaderboard('Influencers', array(\r\n  'reference_id' => 'some-custom-unique-id',\r\n  'type'         => Behave::LEADERBOARD_TYPE_SCORE,\r\n  'scoreType'    => Behave::LEADERBOARD_SCORE_SUM,\r\n  'timeFrame'    => LEADERBOARD_TIME_WEEKLY,\r\n  'active'       => true // Defaults\r\n));\r\n```\r\n\r\nYou can also bind rewards to a leaderboard (So it becomes a contest).\r\nRewards are Badges. Each reward defines the position in the leaderboard to who this rewards should be given and the Badge that it refers to.\r\n\r\nYou can define contest leaderboard this way.\r\n\r\n```php\r\nBehave::createLeaderboard('Influencers', array(\r\n  'reference_id' => 'some-custom-unique-id',\r\n  'type'         => Behave::LEADERBOARD_TYPE_SCORE,\r\n  'scoreType'    => Behave::LEADERBOARD_SCORE_SUM,\r\n  'timeFrame'    => LEADERBOARD_TIME_WEEKLY,\r\n  'active'       => true, // Defaults\r\n  'rewards'      => array(\r\n    array('position' => 1, 'badge' => 'some-custom-id-or-original-id')\r\n  ),\r\n));\r\n```\r\n\r\n### Deleting a leaderboard\r\n\r\n```php\r\nBehave::deleteLeaderboard('some-custom-id-or-original-id');\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}