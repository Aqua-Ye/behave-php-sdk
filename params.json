{"name":"Behave-php-sdk","tagline":"Behave.io PHP SDK","body":"# Introduction\r\n\r\nOur PHP library lets you easily identify your users, track their behaviours and make full use of the API.\r\nThe SDK also allows you to dynamically create and remove leaderboards, contests, badges, retrieve leaderboard results etc...\r\n\r\n# Getting started\r\n\r\n```\r\n$ git clone git@github.com:othierry/behave-php-sdk.git\r\n```\r\n\r\n```php\r\nrequire_once(\"/path/to/behave/Behave.php\");\r\n\r\nBehave::init(\"YOUR_API_SECRET);\r\n```\r\n\r\n## Players\r\n\r\n### Identify\r\n\r\nYou need to identify your users at least once so their player profiles can be created.\r\nIf you call ``identify()`` multiple times with the same user id, the existing player is updated and returned instead. You can optionally attribute some traits to the player.\r\n\r\n```php\r\n$player = Behave::identify(\"42\", array(\r\n  // traits\r\n  'email'   => 'olivier@behave.io',\r\n  'name'    => 'Olivier Thierry',\r\n  'picture' => 'http://url_to_picture',\r\n  'foo'     => 'bar'\r\n));\r\n```\r\n\r\nthe returned Player has the following attributes\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| _id           | String | The id of the Player |\r\n| reference_id  | String | The custom id use have use in ``identify()`` |\r\n| points        | Number | The number of points of the player (default to 0) |\r\n| traits        | Object | The custom traits you have given to the player |\r\n\r\n## Behaviours\r\n\r\nYou need to track your players behaviours if you want to reward them for doing so. Tracking can be either **simple** or **contextual**. You can specify ANY key value pairs to describe the context to which the behaviour was taken. \r\n\r\n### Simple tracking\r\n\r\n```php\r\nBehave::track(\"42\", \"login\");\r\n```\r\n\r\n### Contextual tracking\r\n\r\n```php\r\nBehave::track(\"42\", \"coment-tvshow\", array(\r\n  'tvShow'  => 24,\r\n  'episode' => 11\r\n));\r\n```\r\n\r\n### Tracking results\r\n\r\nWhen you track a user behaviours using ``Behave::track()`` you get back a result object you can use. The result contains the actions that the tracking has triggered (from your [recipes](http://dashboard.behave.io/recipes)).\r\n\r\n```php\r\n$bhResults = Behave::track(\"42\", \"check-in\");\r\n```\r\n\r\nThe results **always contains 3 attributes**.\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| badge         | Object | The unlocked badge (if any, null otherwise) |\r\n| points        | Object | With 2 attributes: ``earned`` and ``balance``. ``earned`` is the number of points the user earned by taking the action or 0 if no points earned, ``balance`` is the updated balance of the player points |\r\n| leaderboards  | Array[Object] |  Leaderboard updates (if any,  empty otherwise). See bellow for detailed structure |\r\n\r\nExample accessing ``$bhResults->points`` attribute.\r\n\r\n```php\r\necho $bhResults->points\r\n{ \r\n  // The number of points the user earned by taking the action\r\n  'earned'  => 0, \r\n\r\n  // The player's updated balance including the points he just earned\r\n  'balance' => 840\r\n}\r\n```\r\n\r\nIf not null ``$bhResults->badge`` contains the Badge that the user has just unlocked. The structure looks like this:\r\n\r\n```php\r\necho $bhResults->badge \r\n// Example output\r\n{\r\n    // Reward id\r\n    \"_id\"    => \"52a01b67cc7df72c79000003\"\r\n    // Number of times this reward was earned by this player\r\n    \"count\"  => 1\r\n    // Badge definition\r\n    \"badge\" => {\r\n      // Badge id\r\n      \"_id\"          => \"529fff2356ce248366000006\"\r\n      // Badge custom id you have defined, null otherwise\r\n      \"reference_id\" => \"deloitte-newbie-badge\"\r\n      // badge name\r\n      \"name\"         => \"Deloitte Newbie\"\r\n      // badge hint\r\n      \"hint\"         => \"Check-in 2 times at Deloitte\"\r\n      // badge unlock message\r\n      \"message\"      => \"Whooa! Look like you are new in da place. keep the effort and you will be rewarded.\"\r\n    }\r\n  }\r\n```\r\n\r\nIf not empty, ``$bhResults->leaderboards`` will contain something like this\r\n\r\n```php\r\necho $bhResults->leaderboards\r\n[\r\n  {\r\n     // The updated leaderboard\r\n     'leaderboard'      => {\r\n        '_id'=> '529fff1156ce248366000006',\r\n        'reference_id' => 'test-lb'\r\n     },\r\n     // Player's position before the update\r\n     'prev_position'    => 5,\r\n     // Player's position after the update\r\n     'post_position'    => 2,\r\n     // Player's updated score\r\n     'score'            => 435,\r\n   }\r\n]\r\n```\r\n## Leaderboards\r\n\r\n### Getting leaderboard current results\r\n\r\nYou can fetch the actual results of any leaderboard at anytime. Here is an example:\r\n\r\n```php\r\n$lbResults = Behave::fetchLeaderboardResults('sample-leaderboard');\r\n// or\r\n$lbResults = Behave::fetchLeaderboardResults('sample-leaderboard', $options);\r\n```\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| page          | Number        | (Optional) The results page to fetch. Default is 1|\r\n| limit         | Number        | (Optional) The max number of results per page. MAXIMUM is 1000 |\r\n| max           | Number        | (Optional) The maximum position to fetch, default is 0 => None |\r\n| players       | Array[String] | (Optional) The players to include in the results, default is null => ALL |\r\n| positions     | String        | (Optional) The way positions are calculated. Possible values are `relative` and `absolute`. `relative` will set the positions according to the players that are included in the results, `absolute` will set the positions according to all the players in the leaderboards. This is useful when for example you want to fetch the results for a player and his friends only. In this situation you could pass `relative` so that the positions are computed between friends and not between all the players in the leaderboards. |\r\n\r\nResults structure will look like this\r\n\r\n```php\r\n[\r\n  {\r\n    'score'  => 129,\r\n    'position' => 1,\r\n    'player' => {\r\n      '_id' => \"529fe03ecbd86b9d6c000002\",\r\n      'reference_id' => '42',\r\n      'traits' => {\r\n        'name'  => 'Olivier Thierry'\r\n        'email' => 'olivier@behave.io'\r\n      },\r\n      'identities' => {\r\n         'facebook' => 12323\r\n      }\r\n    }\r\n  },\r\n  {\r\n    'score'  => 102,\r\n    'position' => 2,\r\n    'player' => {\r\n      '_id' => \"947pg03ecbd86b9d6c05520\",\r\n      'reference_id' => '43',\r\n      'traits' => {\r\n        'name'  => 'Olivier Jeandel'\r\n        'email' => 'jide@behave.io'\r\n      },\r\n      'identities' => {\r\n         'facebook' => 5435\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Getting leaderboard previous results\r\n\r\nWhen a leaderboard is reset (Either by calling Behave::resetLeaderboard() or by hitting the end of the leaderboard's timeframe), a copy of the previous leaderboard results is available (e.g A daily leaderboard will keep the results of the previous day).\r\n\r\nHere is how you can access it:\r\n\r\n```php\r\n$prevLeaderboardResults = Behave::fetchLeaderboardPreviousResults('test-lb');\r\n```\r\n* The **structure** is identical to ``Behave::fetchLeaderboardResults()``\r\n* The **options** are identical to ``Behave::fetchLeaderboardResults()``\r\n\r\n### Getting leaderboard result for a specific player\r\n\r\nYou can also fetch the result for a particular player, on a particular leaderboard. (_e.g What is the position of my user 42 on leaderboard test-lb_)\r\n\r\n```php\r\n$playerResult = Behave::fetchLeaderboardResultForPlayer('test-lb', '42');\r\n{\r\n  'score'    => 435,\r\n  'position' => 2\r\n}\r\n```\r\n\r\n### Getting leaderboard results for a specific player\r\n\r\nYou can also fetch all the leaderboards the player is in, and get the results for that player.\r\n\r\n```php\r\n$playerResults = Behave::fetchLeaderboardResultsForPlayer('42');\r\n[\r\n  {\r\n     'leaderboard' => {\r\n        '_id'=> '529fff1156ce248366000006',\r\n        'reference_id' => 'test-lb'\r\n     },\r\n     // Player's position\r\n     'position' => 2,\r\n     // Player's updated score\r\n     'score' => 435\r\n  },\r\n  {\r\n     'leaderboard' => {\r\n        '_id'=> '876fff1156ce248366000367',\r\n        'reference_id' => 'another-test-lb'\r\n     },\r\n     // Player's position\r\n     'position' => 18,\r\n     // Player's updated score\r\n     'score' => 114\r\n  }\r\n]\r\n\r\n```\r\n\r\nYou can pass an array of options as the second parameter (optional, see bellow for list of available options).\r\n\r\nFor example, if I want to fetch all the leaderboard results for player 42 where he/she is in the top 3:\r\n\r\n```php\r\n$playerResults = Behave::fetchLeaderboardResultsForPlayer(\"42\", array(\r\n  'max' => 3 // Max position\r\n));\r\n[\r\n  {\r\n     'leaderboard' => {\r\n        '_id'=> '529fff1156ce248366000006',\r\n        'reference_id' => 'test-lb'\r\n     },\r\n     // Player's position\r\n     'position' => 2,\r\n     // Player's updated score\r\n     'score' => 435\r\n  }\r\n]\r\n```\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| leaderboards  | Array[String] | (Optional) Leaderboards to process, if empty all the leaderboards will be processed.  |\r\n| max           | Number        | (Optional) The maximum player position acceptance for the leaderboard to be selected.  |\r\n\r\n\r\n### Iterating leaderboard results\r\n\r\n``Behave::fetchLeaderboardResults()`` and ``Behave::fetchLeaderboardPreviousResults()`` are enough when you want to fetch 1 page of 1000 entries maximum. If you want to iterate trough more results for a leaderboards you can use ``Behave::iterateLeaderboardResults()`` and ``Behave::iterateLeaderboardPreviousResults()`` instead.\r\n\r\n* The **structure** is identical to ``Behave::fetchLeaderboardResults()``\r\n* The **options** are identical to ``Behave::fetchLeaderboardResults()``\r\n\r\nExample:\r\n\r\n```php\r\nBehave::iterateLeaderboardResults('test-lb', function($results, $page) {\r\n  // Use results\r\n}, array(\r\n  'limit' => 100, // Fetch by batches of 100\r\n  'max'   => 2500 // Fetch the top 2500 players\r\n));\r\n```\r\n\r\n### Creating a leaderboard\r\n\r\nIn case your app needs to dynamically create leaderboards. You can use the SDK to create or remove leaderboards.\r\n\r\n```php\r\n// influencers-lb is the reference_id we want to use\r\nBehave::createLeaderboard('Influencers', 'influencers-lb', array(\r\n  'type'         => Behave::LEADERBOARD_TYPE_SCORE,\r\n  'scoreType'    => Behave::LEADERBOARD_SCORE_SUM,\r\n  'timeFrame'    => Behave::LEADERBOARD_TIME_WEEKLY,\r\n  'active'       => true // Defaults\r\n));\r\n```\r\n\r\nAvailable parameters are:\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n(Optional) |\r\n| type        | Number | (Optional) - Available values are ``Behave::LEADERBOARD_TYPE_SCORE`` and ``Behave::LEADERBOARD_TYPE_BEHAVIOURAL``. Default is ``Behave::LEADERBOARD_TYPE_BEHAVIOURAL`` |\r\n| scoreType  | Number |  (Optional) - You can specify how the scores are computed, ``Behave::LEADERBOARD_SCORE_SUM`` will increment scores, ``Behave::LEADERBOARD_SCORE_MAX`` will keep the maximum score for a player and discard the other ones. Note that for is ``Behave::LEADERBOARD_TYPE_BEHAVIOURAL`` type, the scoring type will always be ``Behave::LEADERBOARD_SCORE_SUM`` |\r\n| timeFrame  | Number | (Optional) - Specify how often the leaderboard should be reset. Possible values are: ``Behave::LEADERBOARD_TIME_ALLTIME``, ``Behave::LEADERBOARD_TIME_DAILY``, ``Behave::LEADERBOARD_TIME_WEEKLY``, ``Behave::LEADERBOARD_TIME_MONTHLY``. Default to ``Behave::LEADERBOARD_TIME_ALLTIME`` |\r\n| rewards  | Array[Object] | Rewards for that leaderboard. See bellow for example |\r\n| active  | Boolean | Is the leaderboard active? Default to true |\r\n\r\n### Creating a leaderboard with rewards\r\n\r\nYou can also bind rewards to a leaderboard (So it becomes a contest).\r\nRewards are Badges. Each reward defines the position in the leaderboard to who this rewards should be given and the Badge that it refers to.\r\n\r\nYou can define contest leaderboard this way.\r\n\r\n```php\r\nBehave::createLeaderboard('Influencers', 'influencers-lb', array(\r\n  'type'         => Behave::LEADERBOARD_TYPE_SCORE,\r\n  'scoreType'    => Behave::LEADERBOARD_SCORE_SUM,\r\n  'timeFrame'    => Behave::LEADERBOARD_TIME_WEEKLY,\r\n  'active'       => true, // Defaults\r\n  'rewards'      => array(\r\n    array('position' => 1, 'badge' => 'some-custom-id-or-original-id')\r\n  ),\r\n));\r\n```\r\n\r\n### Deleting a leaderboard\r\n\r\nYou can delete a leaderboard at anytime. **THIS ACTION CANNOT BE UNDONE**\r\n\r\n```php\r\nBehave::deleteLeaderboard('some-custom-id-or-original-id');\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}